{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "EVIL",
    
    "fileTypes": [ ".vil" ],
    
    "foldingStartMarker": "\\{",
    "foldingEndMarker": "\\}",

    "patterns": [
        { "include": "#comments" },
        { "include": "#builtins" },
        { "include": "#numbers" },
        { "include": "#structural_characters" },
        { "include": "#constants" },
        { "include": "#strings" },
        { "include": "#keywords" },
        { "include": "#types" },
        { "include": "#overrides" }
    ],

    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line",
                    "match": "\\/\\/.*"
                },
                {
                    "begin": "(\\/\\*)",
                    "beginCaptures": {
                        "1": { "name": "comment.block" }
                    },
                    "end": "(\\*\\/)",
                    "endCaptures": {
                        "1": { "name": "comment.block" }
                    },
                    "contentName": "comment.block"
                }
            ]
        },

        "builtins": {
            "patterns": [
                {
                    "match": "\\b(dofile|require)\\b",
                    "name":"keyword.control.import.evil"
                }
            ]
        },

        "numbers": {
            "patterns": [
                {
                    "match": "[\\-\\+]?\\b(\\d+)\\b",
                    "name": "constant.numeric.integer.evil"
                },
                {
                    "match": "[\\-\\+]?\\b(\\d+)\\.(\\d+)\\b",
                    "name": "constant.numeric.decimal.evil"
                },
                {
                    "match": "[\\-\\+]?\\.\\b(\\d+)\\b",
                    "name": "constant.numeric.decimal.evil"
                },
                {
                    "match": "0x[A-Fa-f0-9]{1,16}",
                    "name": "constant.numeric.hex.evil"
                }
            ]
        },

        "structural_characters": {
            "patterns": [
                {
                    "match": "(\\!|\\#|\\$|\\%|\\&|\\*|\\+|\\/|\\,|\\-|\\.|\\:|\\;|\\<|\\=|\\>|\\?|\\@|\\^|\\||\\~)",
                    "name": "keyword.operator"
                }
            ]
        },

        "constants": {
            "patterns": [
                {
                    "match": "\\b(nil|false|true|Infinity|NaN)\\b",
                    "name": "keyword.other.evil"
                }
            ]
        },

        "strings": {
            "patterns": [
                {
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.evil",
                            "match": "\\\\."
                        }
                    ],
                    "name": "string.quoted.double.evil"
                },
                {
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.evil",
                            "match": "\\\\."
                        }
                    ],
                    "name": "string.quoted.single.evil"
                }
            ]
        },

        "keywords": {
            "patterns": [
                {
                    "match": "\\b(break|do|each|elif|else|for|if|ret|skip|while)\\b",
                    "name": "keyword.control.evil"
                },
                {
                    "match": "\\b(fn|val|override|yield|array|self)\\b",
                    "name": "keyword.other.evil"
                },
                {
                    "match": "\\b(\\!in|in|is|\\!is|typeof)\\b",
                    "name": "keyword.other.evil"
                },
                {
                    "match": "\\b(rw|loc)\\b",
                    "name": "storage.modifier.rw.evil"
                }
            ]
        },

        "types": {
            "patterns": [
                {
                    "match": "\\b(Array|Boolean|Fiber|Function|NativeFunction|NativeObject|Nil|Number|String|Table|Type)\\b",
                    "name": "entity.name.type.evil"
                }
            ]
        },

        "overrides": {
            "patterns": [
                {
                    "match": "\\b(__add|__sub|__mul|__div|__mod|__aneg|__dec|__inc)\\b",
                    "name": "entity.name.function.override.arithmetic.evil"
                },
                {
                    "match": "\\b(__band|__bnot|__bor|__bxor|__shl|__shr)\\b",
                    "name": "entity.name.function.override.bitwise.evil"
                },
                {
                    "match": "\\b(__lnot|__land|__lor)\\b",
                    "name": "entity.name.function.override.logical.evil"
                },
                {
                    "match": "\\b(__deq|__dne|__eq|__ne)\\b",
                    "name": "entity.name.function.override.equality.evil"
                },
                {
                    "match": "\\b(__gt|__lt|__gte|__lte)\\b",
                    "name": "entity.name.function.override.comparison.evil"
                },
                {
                    "match": "\\b(__get|__set)\\b",
                    "name": "entity.name.function.override.indexing.evil"
                },
                {
                    "match": "\\b(__exists|__len)\\b",
                    "name": "entity.name.function.override.utility.evil"
                },
                {
                    "match": "\\b(__tonum|__tostr)\\b",
                    "name": "entity.name.function.override.conversion.evil"
                },
                {
                    "match": "\\b(__invoke)\\b",
                    "name": "entity.name.function.override.invocation.evil"
                }
            ]
        }
    },
    "scopeName": "source.evil"
}